name: Deploy to Azure Container Apps

on:
  push:
    branches: [ master, main, feature/* ]

env:
  AZURE_CONTAINER_REGISTRY: jboardregistry
  CONTAINER_APP_NAME: jboard-react-frontend
  RESOURCE_GROUP: jboard-microservices
  CONTAINER_APP_ENVIRONMENT: jboard-environment
  IMAGE_NAME: jboard-react-frontend
  TARGET_PORT: 80
  BACKEND_CONTAINER_APP_NAME: jboard-java-orchestrator

jobs:
  test-and-setup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests and linting in parallel
      run: |
        npm run lint &
        npm run test &
        wait

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test-and-setup
    if: ${{ success() }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get backend URL
      id: backend-url
      run: |
        BACKEND_FQDN=$(az containerapp show \
          --name ${{ env.BACKEND_CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        echo "Raw FQDN result: '$BACKEND_FQDN'"
        
        if [ -z "$BACKEND_FQDN" ] || [ "$BACKEND_FQDN" = "null" ]; then
          echo "Cannot deploy frontend without a valid backend URL"
          exit 1
        else
          BACKEND_URL="https://$BACKEND_FQDN"
          echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
        fi

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        build-args: |
          VITE_API_URL=${{ steps.backend-url.outputs.backend-url }}
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64

    - name: Deploy to Azure Container Apps
      id: deploy
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        containerAppEnvironment: ${{ env.CONTAINER_APP_ENVIRONMENT }}
        targetPort: ${{ env.TARGET_PORT }}
        ingress: external
        registryUrl: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        registryUsername: ${{ secrets.ACR_USERNAME }}
        registryPassword: ${{ secrets.ACR_PASSWORD }}

    - name: Get deployment URL
      id: get-url
      run: |
        # Try to get FQDN from deploy step output first
        DEPLOY_FQDN="${{ steps.deploy.outputs.fqdn }}"

        if [ -n "$DEPLOY_FQDN" ] && [ "$DEPLOY_FQDN" != "null" ]; then
          echo "fqdn=$DEPLOY_FQDN" >> $GITHUB_OUTPUT
          echo "✅ Got FQDN from deploy output: $DEPLOY_FQDN"
        else
          echo "⚠️ Deploy output FQDN is empty, querying Azure directly..."
          FQDN=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)

          if [ -n "$FQDN" ] && [ "$FQDN" != "null" ]; then
            echo "fqdn=$FQDN" >> $GITHUB_OUTPUT
            echo "✅ Got FQDN from Azure CLI: $FQDN"
          else
            echo "fqdn=your-app-url-not-available" >> $GITHUB_OUTPUT
            echo "❌ Could not retrieve FQDN"
          fi
        fi

    - name: Deployment Summary
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "# ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your application is ready!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Access your app:** https://${{ steps.get-url.outputs.fqdn }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Quick Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ steps.backend-url.outputs.backend-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "# ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The deployment encountered an error. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check which step failed
          if [ "${{ needs.test-and-setup.result }}" != "success" ]; then
            echo "🧪 **Tests/Setup Failed:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check linting errors" >> $GITHUB_STEP_SUMMARY
            echo "- Check test failures" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.backend-url.outcome }}" != "success" ]; then
            echo "🔗 **Backend URL Failed:**" >> $GITHUB_STEP_SUMMARY
            echo "- Verify backend Container App is running" >> $GITHUB_STEP_SUMMARY
            echo "- Check backend Container App has external ingress" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.deploy.outcome }}" != "success" ]; then
            echo "🚀 **Deployment Failed:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check Azure credentials" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Container Registry access" >> $GITHUB_STEP_SUMMARY
            echo "- Check Container App configuration" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔧 **Build Failed:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check Docker build logs" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Dockerfile syntax" >> $GITHUB_STEP_SUMMARY
            echo "- Check build arguments" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the error logs in the failed step" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix the issue and push a new commit" >> $GITHUB_STEP_SUMMARY
          echo "3. The workflow will run automatically" >> $GITHUB_STEP_SUMMARY
        fi
